<% objects = resources_numerical_paginated %>
<%# All tableview_columns values need to have a corresponding match in _resource_list_item_table.html.erb %>
<%
  # The user can keep a custom set of columns for each resource class
  resource = objects[0]
  requiredColView = resource.required_table_columns
  defaultColView = resource.default_table_columns

  # # Update stored column names
  if params.has_key?(:table_cols)
    session["tableview_" + resource.class.name] = params[:table_cols].split(',')
  end

  # Set columns to show, if none are selected, show defaults
  if session.has_key?("tableview_" + resource.class.name) && !session["tableview_"+resource.class.name].empty?
    tableview_columns = requiredColView + session["tableview_"+resource.class.name]
  else
    tableview_columns = requiredColView + defaultColView
  end

  tableview_columns = tableview_columns & resource.allowed_table_columns

  # Prepare available columns for this particular resource type
  # First show the shown columns in order, and then the available ones. Required columns are never given as an option
  availableColView = tableview_columns + (resource.allowed_table_columns - tableview_columns) - requiredColView

%>

<% content_for :pagination do %>
  <%= render partial: 'general/paginate_numerical', locals: { objects: objects } if objects.respond_to?(:current_page) %>
<% end %>

<%= content_for :pagination %>

<%# If there is no param for view, try to retrieve from session information %>
<% if !params.has_key?(:view) && session.has_key?(:view) %>
  <% params[:view] = session[:view]%>
<% elsif params.has_key?(:view)%>
  <% session[:view] = params[:view]%>
<% else %>
  <% params[:view] =="default"%>
  <% session[:view] = params[:view]%>
<% end%>

<div class="list_items_container">
  <ul id="view_tabs" class="nav nav-tabs">
    <li role="presentation" <% if params[:view]=="default" || !params.has_key?(:view) %> class="active" <%end%>>
      <a href="#resource-default-view" view="default">Default</a>
    </li>
    <li role="presentation" <% if params[:view]=="condensed" %> class="active" <%end%>>
      <a href="#resource-condensed-view" view="condensed">Condensed</a>
    </li>
    <li role="presentation"  <% if params[:view]=="table" %> class="active" <%end%>>
      <a href="#resource-table-view" view="table">Table</a>
    </li>
  </ul>

  <% if params[:view]=="condensed" %>
    <div id="resource-condensed-view">
      <%= render partial: 'assets/resource_list_item_condensed', collection: objects %>
    </div>
  <% elsif params[:view]=="table" %>
    <div id="resource-table-view">
      <table class="table table-hover table-bordered">
        <thead>
          <tr>
            <% for column in tableview_columns -%>
              <th style="width:<%= 100/tableview_columns.length %>%"><%= resource.class.human_attribute_name(column) %></th>
            <% end -%>
            <th>
              <div id="tableview-colselector" class="dropdown pull-right">
                  <a href="#" class="dropdown-toggle"><span class="glyphicon glyphicon-cog"></span></a>
                  <div id="sortable-colselector" class="dropdown-menu" style="padding:0px;">
                    <% for column in availableColView -%>
                      <% column_title = resource.class.human_attribute_name(column) %>
                        <div class="checkbox list-group-item" style="margin-top:0px;">
                            <label style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;max-width: 110px;" data-tooltip="<%= column_title %>">
                                <input type="checkbox" value="<%= column %>"
                                <% if tableview_columns.include?(column) %>
                                  checked
                                <% end %>
                                >
                                <%= column_title %>
                            </label>
                            <span class="glyphicon glyphicon-move handle" style="float: right;cursor: grab;"> </span>
                        </div>
                    <% end -%>
                    <button id="table_view_update" type="button" class="btn btn-default" style="width: 100%;height: 100%;margin: 0">
                      Update <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                    </button>
                  </div>
              </div>
            </th>
          </tr>
        </thead>
        <tbody>
          <%= render partial: 'assets/resource_list_item_table', collection: objects, locals: { tableview_columns: tableview_columns } %>
        </tbody>
      </table>
    </div>
  <% else %>
    <div id="resource-default-view">
      <%= render partial: 'assets/resource_list_item', collection: objects %>
    </div>
  <% end %>
</div>

<%= content_for :pagination %>

<script>
  /* Removing data-toggle="dropdown" from 'tableview-colselector a' we can prevent it from closing */
  $j('#tableview-colselector a').on('click', function (event) {
      $j(this).parent().toggleClass('open');
      return false;
  });

  $j('#view_tabs a').click(function () {
    <% if displaying_single_page? %>
      loadAssaySamples($j(this).attr('view'))
    <% else %>
      const url = new URL(window.location.href);
      const search_params = url.searchParams;
      search_params.set('view', $j(this).attr('view'));
      url.search = search_params.toString();
      window.location = url;
    <% end %>
  });
  $j('#tableview-colselector input[type="checkbox"]').click(function (event) {
    event.stopPropagation();
  });

  var colselector = document.getElementById('sortable-colselector')
  if (colselector)
  new Sortable(document.getElementById('sortable-colselector'), {
    animation: 150,
    handle: '.handle',
    ghostClass: 'blue-background-class'
  });

  $j('#tableview-colselector #table_view_update').click(function (event) {
    refreshWithOptions();
  });
  
  /**
    * Refresh the page with the options selected from the dropdown menu
  */
  function refreshWithOptions(){
    table_cols = []
    $j('#tableview-colselector input:checked').each(function() {
      table_cols.push(this.value);
    });
    <% if displaying_single_page? %>
      loadAssaySamples("table", table_cols.toString())
    <% else %>
      const url = new URL(window.location.href);
      const search_params = url.searchParams;
      search_params.set('table_cols', table_cols);
      url.search = search_params.toString();
      window.location = url;
      return true;
    <% end %>
  }
</script>
