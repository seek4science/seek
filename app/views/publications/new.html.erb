<h1>Register Publication</h1>

<div>
<%= error_messages_for('publication', :message => nil) %>

<!-- Nav tabs -->
<% subaction = @subaction || 'Register' # default tab is the old Register %>
<ul class="nav nav-tabs" role="tablist" id="new_publication_tabs" data-subaction="<%= subaction %>">
  <li role="presentation"><a href="#Register" aria-controls="Register" role="tab" data-toggle="tab">From Identifier</a></li>
  <li role="presentation"><a href="#Create" aria-controls="Create" role="tab" data-toggle="tab">Enter manually</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
  <div role="tabpanel" class="tab-pane" id="Register">
    <%= form_tag_with_callbacks(fetch_preview_publications_path,
                            {:remote=>true,
                             :id=>"fetch_publication",
                             :success => "Element.show('publication_preview_container'); Element.hide('publication_error'); new Effect.Highlight('publication_preview_container', { duration: 1.0 });",
                             :failure => "Element.show('publication_error'); Element.hide('publication_preview_container');new Effect.Highlight('publication_error', { duration: 1.0, startcolor: '#FF5555' });",
                             :loading => "Element.hide('publication_preview_container');Element.show('spinner');$('fetch_button').disabled=true;",
                             :complete => "Element.hide('spinner');$('fetch_button').disabled=false;"}) do %>    <p>
      Choose whether to search by PubMed ID or DOI using the dropdown menu below, then enter the document identifier into the text box and click "Fetch".<br>
      If SEEK successfully retrieves your publication, click "Register" to process to the next step.
    </p>
    <div id="publication_error" class="error_div alert alert-danger" style="display:none"></div>

    <div class="form-group">
      <div class="row">
        <div class="col-sm-2 col-xs-5">
          <%= select_tag("protocol", options_for_select([["PubMed ID","pubmed"],["DOI","doi"]]), :class => 'form-control') %>
        </div>
        <div class="col-sm-10 col-xs-7">
          <%= text_field_tag("key", '', :class => 'form-control') %>
        </div>
      </div>
    </div>

    <p>
      Please select the <%= t('project').pluralize %> this publication is related to. You must select a <%= t('project') %>, and it must be a <%= t('project') %>
      you are a member of.
    </p>

    <%= fields_for(@publication) {|f|  f.hidden_field :parent_name } -%>
    <%= render :partial => 'projects/project_selector', :locals => {:resource => @publication, :allow_nil => Seek::Config.is_virtualliver } -%>

    <%= submit_tag 'Fetch',:id=>"fetch_button", :class => 'btn btn-default' %>
    <%= image_tag "ajax-loader.gif", :id => 'spinner', :style => 'display:none;' -%>
    <% end %>

    <div id="publication_preview_container" style="display:none;"></div>
</div>

<div role="tabpanel" class="tab-pane" id="Create">
<%= form_for @publication, :html => { :class => 'form-horizontal' } do |publication_form| %>
  <%= publication_form.hidden_field :parent_name %>
  <div class="form-group">
  <%= label_tag :project_ids, 'Projects', :class => 'control-label col-sm-2' %>
  <div class="col-sm-10">
      <%= publication_form.collection_select :project_ids, User.current_user.person.projects, :id, :title, {}, :class => 'form-control', :multiple => 'multiple' %>
    </div>
  </div>
  <div class="form-group">
    <%= label_tag :pubmed_id, "Pubmed ID", :class => 'control-label col-sm-2' %>
    <div class="col-sm-6">
      <%= publication_form.text_field :pubmed_id, :class => 'form-control' %>
    </div>
    <div class=" col-sm-4">
      <button id="retrieve_from_pubmed" class="btn btn-default">PUBMED</button>
    </div>
  </div>
  <div class="form-group">
    <%= label_tag :doi, "DOI", :class => 'control-label col-sm-2' %>
    <div class="col-sm-6">
      <%= publication_form.text_field :doi, :class => 'form-control' %>
    </div>
    <div class=" col-sm-4">
      <button id="retrieve_from_crossref" class="btn btn-default">Crossref</button>
    </div>
  </div>
  <div class="form-group">
  <%= label_tag :title, 'Title', :class => 'control-label col-sm-2' %>  
  <div class="col-sm-10">
    <%= publication_form.text_area :title, :class => 'form-control', :rows => 2, :cols => 100 %>
  </div>
  </div>
  <div class="form-group">
    <%= label_tag :publication_authors, 'Authors', :class => 'control-label col-sm-2' %>
    <div class="col-sm-9">
      <%= publication_form.collection_select :publication_authors, @publication.publication_authors, :full_name, :full_name, {:selected => @publication.publication_authors.map(&:id)}, :class => 'form-control', :multiple => 'multiple' %>
    </div>
    <div class="col-sm-1">
      <button type="button" class="btn btn-sm" data-toggle="popover" data-html="true" data-content="
        <span class='tag label label-primary'>Author linked to User</span><br>
        <span class='tag label label-success'>User</span><br>
        <span class='tag label label-warning'>Known Author</span><br>
        <span class='tag label label-danger'>New Author</span>
      ">
        Explain
      </button>
    </div>

  </div>
  <div class="form-group">
  <%= label_tag :abstract, nil, :class => 'control-label col-sm-2' %>  
  <div class="col-sm-10">
      <%= publication_form.text_area :abstract, :class => 'form-control', :rows => 5, :cols => 100 %>
    </div>
  </div>
  <div class="form-group">
  <%= label_tag :journal, nil, :class => 'control-label col-sm-2' %>
  <div class="col-sm-10">
      <%= publication_form.text_field :journal, :class => 'form-control' %>
    </div>
  </div>
  <div class="form-group">
  <%= label_tag :citation, nil, :class => 'control-label col-sm-2' %>
  <div class="col-sm-10">
      <%= publication_form.text_field :citation, :class => 'form-control' %>
    </div>
  </div>
  <div class="form-group">
  <%= label_tag :published_date, nil, :class => 'control-label col-sm-2' %>  
  <div class="col-sm-10">
      <%= publication_form.date_select :published_date, :class => 'form-control' %>
    </div>
  </div>
  <div class="form-group">
    <div class="col-sm-2 col-sm-offset-2">
      <%= publication_form.submit 'Create', :name => "subaction", :value => 'Create', :class => 'btn btn-primary' %>
    </div>
  </div>

<% end %>
  
</div>

</div><!--end Tab panes -->

</div>

<script type="text/javascript">
function addAuthorsToPublication( authorlist, selector_tagsinput) {
  var tagsinput_elem = jQuery(selector_tagsinput);
  if( tagsinput_elem.length == 0) {
    return;
  }

  tagsinput_elem.tagsinput('removeAll');

  if( authorlist.length == 0) {
    return;
  }

  jQuery.ajax({
    url: "<%= query_authors_publications_path :format => :json %>",
    datatype: 'json',
    contentType: "application/json",
    data: { "authors": authorlist },
    success: function(authors){
      authors.forEach( function(item,index){
        tagsinput_elem.tagsinput('add', item);
      });
    }
  });
}

jQuery(document).ready(function() {
  // activate tab of current subaction, but only if no hash is set
  if( !window.location.hash) {
    var newpublications_tabs = jQuery('#new_publication_tabs');
    var activate_tab_hash = newpublications_tabs.data('subaction');
    var activate_tab = newpublications_tabs.find('a[href="#' + activate_tab_hash + '"]');
    activate_tab.trigger('click');
  }
  
  // activate popovers
  jQuery('[data-toggle="popover"]').popover();
  
  jQuery('div[id="Create"] select[id="publication_project_ids"]').multiselect({
    enableCaseInsensitiveFiltering: true
  });
  
  var bloodhound_authors = new Bloodhound({
    datumTokenizer: Bloodhound.tokenizers.obj.whitespace(['first_name','last_name']),
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    remote: {
      url: '<%= query_authors_typeahead_publications_path :format => :json, :full_name => 'FULL_NAME_QUERY' %>',
      wildcard: 'FULL_NAME_QUERY'
    },
    limit: 10
  });
  bloodhound_authors.initialize();

  var bloodhound_users = new Bloodhound({
    datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    remote: {
      url: '<%= typeahead_people_path :format => :json, :query => 'FULL_NAME_QUERY' %>',
      wildcard: 'FULL_NAME_QUERY'
    },
    limit: 10
  });
  bloodhound_authors.initialize();
  bloodhound_users.initialize();
  
  jQuery('#publication_publication_authors').tagsinput({
    tagClass: function(item){
      // person/user and not an author
      if( item.name) return 'label label-success';
      // this author does not exist yet
      if( item.count == 0) return 'label label-danger';
      // this author is associated with a know person
      if( item.person_id) return 'label label-primary';
      // this is an author that is already associated with a publication
      return 'label label-warning';
    },
    freeInput: false,
    allowDuplicates: true,
    itemText: function(item) { return item.name ? item.name : item.first_name + " " + item.last_name; },
    itemValue: function(item) { return item.name ? item.name : item.first_name + " " + item.last_name; },
    itemTitle: function(item) { return item.name ? item.name : ( item.first_name + " " + item.last_name + ": #publications " + item.count + ", seek_person? " + (item.person_id ? "yes" : "no")); },
    typeaheadjs: [{
        highlight: true,
        minLength: 1
      },
      [
        {
          name: "authors",
          displayKey: function(item){ return item.first_name + " " + item.last_name;},
          source: bloodhound_authors.ttAdapter(),
          templates: {
            header: 'Authors',
            suggestion: HandlebarsTemplates['typeahead/publication_author']
          }
        },{
          name: "users",
          displayKey: function(item){ return item.name;},
          source: bloodhound_users.ttAdapter(),
          templates: {
            header: 'Users',
            suggestion: HandlebarsTemplates['typeahead/hint']
          }
        }
      ]
    ]
  });

  // add all options of the multiselect
  jQuery('#publication_publication_authors option').each(function(index,element){
    jQuery('#publication_publication_authors').tagsinput('add', jQuery(element).val());
  });

  jQuery('#retrieve_from_crossref').on('click', function(e){
    e.preventDefault(); // prevent the default form submit action

    var doi = jQuery('#publication_doi').val();
    doi = doi.replace(/^http:\/\/dx\.doi\.org/, '');

    jQuery.ajax({
      url: 'http://data.crossref.org/' + doi,
      accepts: { 'citeproc': "application/vnd.citationstyles.csl+json" },
      dataType: 'json',
      success: function(data, textStatus, jqXHR) {
        jQuery('#publication_doi').parents('.form-group').removeClass('has-error');
        jQuery('#publication_doi').parents('.form-group').addClass('has-success');
        jQuery('#crossref_id').val(data.DOI);
        jQuery('#publication_title').val(data.title);
        jQuery('#publication_journal').val(data.publisher);
        jQuery('#publication_published_date_1i').val(data["published-online"]["date-parts"][0][0]);
        jQuery('#publication_published_date_2i').val(data["published-online"]["date-parts"][0][1]);
        jQuery('#publication_published_date_3i').val(data["published-online"]["date-parts"][0][2]);
        var authorlist = [];
        data.author.forEach(function(item,index){
          authorlist.push({"first_name": item.given, "last_name": item.family});
        });
        addAuthorsToPublication( authorlist, '#publication_publication_authors');
      },
      // http://www.crosscite.org/cn/
      statusCode: {
        // 200: function() { console.log("DOI: " + doi + " The request was OK.");},
        204: function() { console.log("DOI: " + doi + " The request was OK but there was no metadata available.");},
        404: function() { console.log("DOI: " + doi + " The DOI requested doesn't exist.");},
        406: function() { console.log("DOI: " + doi + " Can't serve any requested content type.");}
      },
      error: function() {
        jQuery('#publication_doi').parents('.form-group').removeClass('has-success');
        jQuery('#publication_doi').parents('.form-group').addClass('has-error');
      }
    });
  });
  jQuery('#retrieve_from_pubmed').on('click', function(e){
    e.preventDefault(); // prevent the default form submit action
    var pubmedid = jQuery('#publication_pubmed_id').val();
    jQuery.ajax({
      url: 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi',
      data: {
        'db': 'pubmed',
        'id': pubmedid,
        'retmode': 'xml',
        'retmax': 1
      },
      dataType: 'xml',
      success: function(data, textStatus, jqXHR) {
        jQuery('#publication_pubmed_id').parents('.form-group').removeClass('has-error');
        jQuery('#publication_pubmed_id').parents('.form-group').addClass('has-success');
        var doc = jQuery(data);
        var doi_elem = jQuery(data).find('PubmedArticleSet > PubmedArticle > PubmedData > ArticleIdList > ArticleId[IdType="doi"]');
        if( doi_elem.length != 0) {
          jQuery('#publication_doi').val(doi_elem.html());
        }
        
        var medline_citation = jQuery(data).find('PubmedArticleSet > PubmedArticle > MedlineCitation');
        
        var title_elem = medline_citation.find('Article > ArticleTitle');
        if( title_elem.length != 0) {
          jQuery('#publication_title').val(title_elem.html());
        }
        var abstract_elem = medline_citation.find('Article > Abstract > AbstractText');
        if( abstract_elem.length != 0) {
          jQuery('#publication_abstract').val(abstract_elem.html());
        }
        var journal_elem = medline_citation.find('Article > Journal > Title');
        if( journal_elem.length != 0) {
          jQuery('#publication_journal').val(journal_elem.html());
        }
        var datecreated_elem = medline_citation.find('DateCreated');
        if( datecreated_elem.length != 0) {
          jQuery('#publication_published_date_1i').val(parseInt(datecreated_elem.find('Year').html()));
          jQuery('#publication_published_date_2i').val(parseInt(datecreated_elem.find('Month').html()));
          jQuery('#publication_published_date_3i').val(parseInt(datecreated_elem.find('Day').html()));
        }
        
        var authorlist = [];
        var author_list_elem = medline_citation.find('Article > AuthorList > Author').each( function(index, element){
          var firstname = jQuery(element).find('ForeName').html();
          var lastname = jQuery(element).find('LastName').html();
          authorlist.push({"first_name": firstname, "last_name": lastname});
        });
        addAuthorsToPublication(authorlist,"#publication_publication_authors");
      },
      error: function() {
        jQuery('#publication_pubmed_id').parents('.form-group').removeClass('has-success');
        jQuery('#publication_pubmed_id').parents('.form-group').addClass('has-error');
      }
    });
  });
});

function updateProjectIds(){
  var form = $('new_publication');
  //need to query by classname, as there are now two elements with the same id publication_project_ids
  //this is the inactive element
  var inactive_project_select = form.getElementsByClassName('project_ids')[0];
  //this is the active element, that the selected value gets changed through UI
  var active_project_select = $('div[id="Register"] select[id="publication_project_ids"]');
  //need to update inactive element from active element
  inactive_project_select.setValue(active_project_select.getValue());
}

</script>
