<div id="content-wrapper">

    <div class="inner">

        <div id="study_design_tableContainer">
            <h2>Experimental factors</h2>

            <a class="btn btn-secondary pull-left" onClick="add_var('.exptable')"> <i
                    class="glyphicon glyphicon-plus"></i> Add
                Variable</a>
            <table class="table tableXs exptable">
                <thead class="thead-dark">
                    <th>Experimental factors</th>
                    <th></th>
                    <th>Factors levels</th>
                </thead>
                <tbody>
                </tbody>
            </table>
            <h2>Response variables</h2>

            <a class="btn btn-secondary pull-left" onClick="add_rep('.resptable')"> <i class="glyphicon glyphicon-plus"></i> Add
                Variable</a>
            &nbsp;
            <a class="btn btn-secondary pull-left" onClick="add_dep_col()">
                <i class="glyphicon glyphicon-plus"></i> Add sub-sample</a>

            <table class="table tableXs resptable">
                <thead class="thead-dark">
                    <th>Response variables (what will you quantify?)</th>
                    <th>Material (quantification on what?)</th>
                    <th>Sub-sample of</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Blocking variables</h2>

            <a class="btn btn-secondary pull-left" onClick="add_var('.blocktable')"> <i class="glyphicon glyphicon-plus"></i>
                Add Variable</a>

            <table class="table tableXs blocktable">
                <thead class="thead-dark">
                    <th>Blocking variables</th>
                    <th></th>
                    <th>Levels</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Covariates</h2>

            <a class="btn btn-secondary pull-left" onClick="add_var('.covtable')"> <i class="glyphicon glyphicon-plus"></i> Add
                Variable</a>

            <table class="table tableXs covtable">
                <thead class="thead-dark">
                    <th>Covariates (Variables of no interest that might affect response variables)</th>
                    <th></th>
                    <th>Levels</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Confounding variables</h2>

            <a class="btn btn-secondary pull-left" onClick="add_var('.conftable')"> <i class="glyphicon glyphicon-plus"></i>
                Add Variable</a>

            <table class="table tableXs conftable">
                <thead class="thead-dark">
                    <th>Confounding variables (Variables of no interest that might affect experimental factors and
                        response variables)</th>
                    <th></th>
                    <th>Levels</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Control variables</h2>

            <a class="btn btn-secondary pull-left" onClick="add_rep('.controltable')"> <i class="glyphicon glyphicon-plus"></i>
                Add Variable</a>

            <table class="table tableXs controltable">
                <thead class="thead-dark">
                    <th>Control variables (Variable that stay unchanged)</th>
                    <th>Description</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Replicates</h2>

            <a class="btn btn-secondary pull-left" onClick="add_rep('.reptable')"> <i class="glyphicon glyphicon-plus"></i> Add
                Variable</a>

            <table class="table tableXs reptable">
                <thead class="thead-dark">
                    <th>Replicates</th>
                    <th>Number</th>
                    <th>Description</th>
                </thead>
                <tbody>
                </tbody>
            </table>

            <h2>Design of experiment</h2>
            <div class="form-inline" style="text-align:left">
                <select id="expDesign" class="form-control">
                    <option value="">Please select an item</option>
                    <option value="1">One-factor experiment</option>
                </select>
                <input id="experiment_design_desc" type="text" class="form-control" style="min-width:400px"
                    placeholder="Description" value="Compare two temperature. Three independent replicates">
            </div>
            <div style="text-align:center">
                <h2></h2>
                <a class="btn btn-primary" onClick="save_design()">Save Design</a>
            </div>
        </div>
    </div>
</div>

<script>
    $j(document).ready(function () {
        $j(".table").on('click', 'td', function () {
            if ($j(this).attr("contentEditable") == true) {
                $j(this).attr("contentEditable", "false");
            } else {
                $j(this).attr("contentEditable", "true");
            }
        });
    });

    function add_level(_tr = "", level = "Level name") {
        var tr = _tr.length > 0 ? _tr : event.target.closest('tr')
        var firstCol = $j(tr).find('td:eq(0)');
        var rowspan = parseInt($j(firstCol).attr('rowspan'));
        $j(firstCol).attr('rowspan', rowspan + 1);
        $j(tr).find('td:eq(1)').attr('rowspan', rowspan + 1);
        $j(tr).after(`<tr><td>${level}</td> </tr>`)
    }

    function add_var(table, variable = "variable name", level = "level name") {
        let tag =
            ` <tr><td rowspan='1'>${variable}</td><td rowspan='1'><a class='btn btn-secondary btn-xs' onClick='add_level()'> <i class='glyphicon glyphicon-plus'></i> Add Level</a></td><td>${level}</td></tr>`
        $j(`${table} tbody`).append(tag)
    }

    function add_dep_col(value = "") {
        let colCount = $j('.resptable th td').length + 1;
        $j('.resptable').find('thead').find('th').eq(colCount - 2).after('<th>sub-sample of</th>');
        $j('.resptable').find('tr').each(function () {
            $j(this).find('td').eq(colCount - 2).after(`<td>${value}</td>`);
        });
    }

    function add_rep(table, items = "") {
        let newRow;
        $j(`${table} thead tr`).find('th').each(function (i, a) {
            newRow += Object.keys(items).length > 0 ? `<td>${Object.values(items)[i]}</td>` : '<td>TBD</td>'
        });
       // $j('.reptable tbody').append('<tr>' + newRow + '</tr>')
       $j(`${table} tbody`).append('<tr>' + newRow + '</tr>')
    }

    function save_design() {
        let pid = <%=params[:id]%>
            $j.ajax({
                method: 'PATCH',
                url: `${pid}/update_study_design`,
                data: {
                    "data": JSON.stringify(create_data()),
                    "std_id": $j("#selected_item_id").val()
                },
                success: s => {
                    alert('Study design was updated successfully!')
                },
                error: e => {
                    alert('error!')
                }
            })
    }

    function create_data() {
        let data = {}
        let item_structure = {
            "factor": "",
            "levels": []
        }
        data.experimental_factors = get_table_JSON(".exptable", item_structure, [1])
        item_structure = {
            "variable": "",
            "material": "",
            "sub_sample": ""
        }
        $j('.resptable thead tr th').each(function (i, a) {
            if (i > 2) item_structure[`sub_sample${i-2}`] = ""
        })
        data.response_variables = get_table_JSON(".resptable", item_structure, [])
        item_structure = {
            "variable": "",
            "levels": []
        }
        data.blocking_variables = get_table_JSON(".blocktable", item_structure, [1])
        item_structure = {
            "covariate": "",
            "levels": []
        }
        data.covariates = get_table_JSON(".covtable", item_structure, [1])
        item_structure = {
            "variable": "",
            "levels": []
        }
        data.cofounding_variables = get_table_JSON(".conftable", item_structure, [1])
        item_structure = {
            "variable": "",
            "description": ""
        }
        data.control_variables = get_table_JSON(".controltable", item_structure, [])
        item_structure = {
            "replicate": "",
            "number": "",
            "description": ""
        }
        data.replicates = get_table_JSON(".reptable", item_structure, [])
        data.design_of_experiment = {
            "item": $j("#expDesign option:selected").html(),
            "description": $j("#experiment_design_desc").val()
        }
        return data
    }

    function load_design() {
        let pid = <%=params[:id]%>
            let design_data = "";
        //Load data from DB
        $j.ajax({
            method: 'GET',
            url: `${pid}/get_study_design`,
            data: {
                "std_id": $j("#selected_item_id").val()
            },
            success: data => {
                design_data = JSON.parse(data.data)
                load_tables(design_data);
            },
            error: e => {
                alert('error!')
            }
        })
    }

    function load_tables(data) {
        $j('.exptable tbody').empty()
        $j('.resptable tbody').empty()
        $j('.blocktable tbody').empty()
        $j('.covtable tbody').empty()
        $j('.conftable tbody').empty()
        $j('.controltable tbody').empty()
        $j('.reptable tbody').empty()
        for (let key in data.experimental_factors) {
            let temp = data.experimental_factors[key]
            add_var('.exptable', temp.factor, temp.levels[0])
            let last_tr = $j('.exptable tbody tr').last()
            for (let l in temp.levels) {
                if (l > 0) add_level(last_tr, temp.levels[l])
            }
        }
        for (let key in data.response_variables) {
            let temp = data.response_variables[key]
            let curCount = $j('.resptable thead tr th').length
            let realCount = Object.keys(temp).length
            for (let i = 0; i < realCount - curCount; i++) {
                add_dep_col(temp[realCount + i])
            }
            add_rep('.resptable', temp)
        }
        for (let key in data.blocking_variables) {
            let temp = data.blocking_variables[key]
            add_var('.blocktable', temp.factor, temp.levels[0])
            let last_tr = $j('.blocktable tbody tr').last()
            for (let l in temp.levels) {
                if (l > 0) add_level(last_tr, temp.levels[l])
            }
        }
        for (let key in data.covariates) {
            let temp = data.covariates[key]
            add_var('.covtable', temp.factor, temp.levels[0])
            let last_tr = $j('.covtable tbody tr').last()
            for (let l in temp.levels) {
                if (l > 0) add_level(last_tr, temp.levels[l])
            }
        }
        for (let key in data.cofounding_variables) {
            let temp = data.cofounding_variables[key]
            add_var('.conftable', temp.factor, temp.levels[0])
            let last_tr = $j('.conftable tbody tr').last()
            for (let l in temp.levels) {
                if (l > 0) add_level(last_tr, temp.levels[l])
            }
        }
        for (let key in data.control_variables) {
            let temp = data.control_variables[key]
            add_rep('.controltable', temp)
        }
        for (let key in data.replicates) {
            let temp = data.replicates[key]
            add_rep('.reptable', temp)
        }
        $j("#expDesignd").val(data.design_of_experiment.item)
        $j("#experiment_design_desc").val(data.design_of_experiment.description)

    }

    function get_table_JSON(table_class, item_structure, ignore_col_list) {
        let trs = $j(table_class + " tbody tr");
        let counter = 0
        let root = []
        let currentItem = copy(item_structure)
        trs.each(function (i, tr) {
            if (counter > 0) {
                counter--;
                currentItem.levels.push($j(tr).find('td').html())
            } else {
                currentItem = copy(item_structure)
                $j(tr).find('td').each(function (j, td) {
                    if ($j(td).attr("rowspan")) {
                        counter = $j(td).attr("rowspan") - 1;
                    }
                    if (j == 0) {
                        currentItem[Object.keys(item_structure)[0]] = $j(td).html()
                    } else if (ignore_col_list.indexOf(j) == -1) {
                        if (Object.keys(item_structure)[1] == "levels")
                            currentItem.levels.push($j(td).html())
                        else currentItem[Object.keys(item_structure)[j]] = $j(td).html()
                    }
                })
                root.push(currentItem)
            }
        });
        return root
    }

    function copy(x) {
        return JSON.parse(JSON.stringify(x));
    }
</script>

<style>
    h2 {
        overflow: hidden;
        text-align: left;
        font-size: 16px !important;
        font-weight: bold !important;
        color: #888 !important;
    }

    h2:after {
        background-color: #bbb;
        content: "";
        display: inline-block;
        height: 1px;
        position: relative;
        vertical-align: middle;
        width: 100%;
    }

    h2:after {
        left: 0.5em;
        margin-right: -50%;
    }

    #study_design_tableContainer {
        text-align: center;
        margin-right: auto;
        margin-left: auto;
    }
</style>