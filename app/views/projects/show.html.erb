<%= render :partial => "general/item_title",:locals => {:item=>@project, :buttons_partial => 'projects/buttons'} %>
<div>
  <div class="col-lg-2"></div>
  <div class="col-lg-8">
    <img src="/assets/guidance.png" alt="user guidance" style=" width: 100%; height: auto;margin-bottom:20px" />
    <%= hidden_field_tag 'selected_item', ''  %>
    <%= hidden_field_tag 'selected_folder', ''  %>
  </div>
  <div class="col-lg-2"></div>
</div>
<div class="row">
  <div class="col-md-12  box_about_actor">
    <%= item_description @project.description -%>
    <div class="row">
      <div class=col-lg-3>
        <div id="treeview" class="col-lg-12 project_treeview">
          <div id="html" class="demo"></div>
        </div>
      </div>
      <div class="col-lg-9">
        <div style="padding:10px;background-color: aliceblue;border-radius: 5px; border: #ddd 1px solid">
          <div id="container" class="container-fluid">
            <div id="projectDetailContainer" class="row">
              <div class="col-lg-8 simpleForm">
                <%= render :partial => "project_details" -%>
              </div>
              <div class="col-lg-4">
                <%= render :partial => "layouts/contribution_section_box_avatar", :locals => { :object => @project } -%>
                <% if @project.can_manage? %>
                <%= render :partial => 'general/storage_usage_box', locals: { programme: @project,
                                                                    url: storage_report_project_path(@project)} %>
                <% end %>
              </div>
            </div>
            <div id="fileManagerContainer" class="row">
              <%= render :partial => "filemanager" -%>
            </div>
            <div id="investigationContainer" class="row">

              <%= render :partial => "investigation_details" -%>

            </div>
            <div id="studyContainer" class="row">
              <%= render :partial => "study" -%>
            </div>
          </div>
        </div>
      </div>
    </div>
    <% if Seek::Config.project_hierarchy_enabled && logged_in_and_member? -%>
    <div style="clear:both;">
      <b>
        Project Hierarchies
        (<%= link_to "hide", '#', id: 'project-hierarchy-toggle' -%>):
      </b>
      <br />
      <br />
      <div id="project_hierarchy">
        <ul>
          <%= Rails.cache.fetch([:project_tree_editor, @project.cache_key]) { tree_editor_display Project, false, false, @project.id, "Person", true, true } %>
        </ul>
      </div>
    </div>
    <br />
    <div style="clear:both;">
      <b>
        <%= t('project') %> Members
        (<%= link_to "show", '#', id: 'project-hierarchy-members-toggle' %>):
      </b>
      <br />
      <br />
      <div id="project_mailing_list" style="display: none;">
        <%= project_mailing_list @project %>
      </div>
    </div>
    <% end %>
    <% if false%>
    <%# get, classify and authorize all assets for this project -%>
    <%= render :partial=>"general/items_related_to",:object => @project %>
    <%end%>
    <% if request_project_membership_button_enabled?(@project) %>
    <%= render partial: 'request_membership_form', locals: { project: @project } %>
    <% end %>
  </div>
</div>

<script>
  $j('#project-hierarchy-toggle').click(function () {
    var el = $j('#project_hierarchy');

    if (el[0].style.display === 'none') {
      el.fadeIn();
      $j(this).text('hide');
    } else {
      el.fadeOut();
      $j(this).text('show');
    }

    return false;
  });

  $j('#project-hierarchy-members-toggle').click(function () {
    var el = $j('#project_mailing_list');

    if (el[0].style.display === 'none') {
      el.fadeIn();
      $j(this).text('hide');
    } else {
      el.fadeOut();
      $j(this).text('show');
    }

    return false;
  });
</script>

<script>
  (function ($, undefined) {
    "use strict";
    $j.jstree.plugins.separate = function (options, parent) {
      this.redraw_node = function (obj, deep, callback, force_draw) {
        obj = parent.redraw_node.apply(this, arguments);
        var n = this.get_node(obj),
          d = document;
        if (obj) {
          if (n.original.count) {
            obj.childNodes[1].innerHTML += " <span class='badge badge-secondary'>" + n.original.count +
              "</span>"
          }
          if (n.original._type) $j(obj.childNodes[1]).attr('_type', n.original._type)
          if (n.original._id) $j(obj.childNodes[1]).attr('_id', n.original._id)
          if (n.state.separate) {
            let p = d.createElement('p')
            p.innerHTML = n.state.separate.label;
            p.className = 'separator';
            if (n.state.separate.action) {
              let a = d.createElement('a')
              a.href = n.state.separate.action;
              a.className = 'treeaction glyphicon glyphicon-plus';
              obj.prepend(a)
            }
            obj.prepend(p);
          }
        }
        return obj;
      };
    }
  })(jQuery);

  $j(document).ready(function () {
    hide_all_containers()
    $j("#projectDetailContainer").show()
  })

  function hide_all_containers() {
    $j("#projectDetailContainer").hide()
    $j("#fileManagerContainer").hide()
    $j("#investigationContainer").hide()
    $j("#studyContainer").hide()
  }

  $j('#html').on('changed.jstree', function (e, data) {
      let item = data.instance.get_node(data.selected[0])
      let item_id = item.original._id
      let item_type = item.original._type
      $j("#selected_item").val(item_id)
      hide_all_containers();
      switch (item_type) {
        case "prj":
          $j("#projectDetailContainer").show()
          break;
        case "inv":
          $j("#investigationContainer").show()
          populate_tags(item_id)
          break;
        case "std":
          $j("#studyContainer").show()
          break;
        case "asy":
          $j("#fileManagerContainer").show()
          break;
        case "fld":
          $j("#fileManagerContainer").show()
          $j("#selected_folder").val(item.text)
          break;
      }
    })
    .jstree({
      'core': {
        'data': <%= @treeData.html_safe %>
      },
      plugins: ["separate"]
    });


  function populate_tags(investigation_id) {
    //Populate the tags input with list of 'Shared with people'
    let pid = <%= params[:id] %>
      $j.ajax({
        type: 'GET',
        url: pid + '/investigation_shared_with?inv_id=' + investigation_id,
        
        success: s => {
          if (s.people)
          $j("#permission-people-ids").tagsinput('removeAll');
            s.people.map((person) => {
              $j('#permission-people-ids').tagsinput('add', {
                id: person.id,
                name: person.nam
              })
            })
        },
        error: e => {
          alert("Error retrieving investigation sharing list")
        }
      })
  }
</script>