 <div class="col-lg-12">
     <input type="file" id="file" style="display:none">
     <div class="row">
         <div id=files class="simpleForm" style="overflow-x:scroll">
             <ul class="fileManager">
                 <li>empty</li>
                 <li style="border-left: 2px dotted #aaa; border-radius:0">
                     <span id="upload_btn" title="Upload a file" class="big_plus glyphicon glyphicon-plus"></span>
                 </li>
             </ul>
         </div>
     </div>
     <div class="row" id="text_content">
         <textarea placeholder="Insert content here!" id="txt_file_content" class="form-control">
         </textarea>
         <input id="btn_save_content" class="btn btn-primary pull-right" style="margin-top:5px" type="button"
             value="Save">
     </div>
 </div>
 <div id="tbl_file_content" style="display:none">
     <a class="btn btn-primary btn-sm" onClick="AddRow('.tableInpOut')"> <i class="glyphicon glyphicon-plus"></i>Add
         Row</a>
     <a class="btn btn-primary btn-sm" onClick="showPreDefinedCols(event)">
         <i class="glyphicon glyphicon-plus"></i>Add Column</a>
     <a id="btn_update_tables" class="btn btn-primary btn-sm pull-right">Save</a>
     <div class="arrow_box" style="padding:5px; display:none">
         <ul id="preDefinedList" style="list-style-type: none;padding:0;">
             <li><input placeholder="custom column name..." class="form-control customCol" /></li>
             <li><input type="button" class="btn btn-primary col-md-12 predef" value="Species"></li>
         </ul>
     </div>
     <table>
         <table class="table tableXs tableInpOut">
             <thead class="thead-dark">
                 <tr></tr>
             </thead>
             <tbody>
             </tbody>
         </table>
     </table>
 </div>

 <script>
     let folderName
     $j("#upload_btn").on('click', () => {
         $j('#file').click();
     })

     $j('#file').on('change', () => {
         let formData = new FormData();
         let file = $j('#file')[0].files[0]
         formData.append('file', file);
         formData.append('folder', folderName)
         formData.append('description', 'description...')
         $j.ajax({
             type: 'POST',
             url: pid + '/upload_project_file',
             data: formData,
             processData: false,
             contentType: false,
             success: s => {
                 console.log('Uploaded')
                 let ext = $j('#file').val().split('.').pop();
                 addFile(s.id, file_icon(ext), minify(file.name))
                 let origin = $j("#" + $j("#selected_tree_item_id").val() + " a span")
                 bounce(origin, parseInt(origin.text()) + 1)
                 $j('#file').val('');
             }
         })
     })


     function load_files() {
         folderName = $j('#selected_folder').val()
         let base = $j(".fileManager");
         $j('.fileManager li:not(:last-child)').remove();

         base.not(':last').remove()
         $j.ajax({
             type: 'GET',
             url: pid + '/get_file_list?folder=' + folderName,
             success: result => {
                 if (!result) {
                     base.empty()
                     base.append("<li>Error!</li>")
                     return
                 }
                 if (result.length > 0) {
                     result.forEach(function (file) {
                         addFile(file.id, file_icon(file.extension), minify(file.name))
                     })
                 } else {
                     base.prepend('<li>empty</li>')
                 }
             }
         })
     }

     function addFile(id, ext, name) {
         if ($j(".fileManager li:first").text() == "empty")
             $j(".fileManager li:first").remove();

         let item = id.includes('method') || id.includes('table') ?
             `<li class="file" data-id=${id}><img src="/assets/${ext}.png"> <br><a onClick="load_text_content('${id}')" data-filetype="txt" class="file">${name}</a></li>` :
             `<li class="file" data-id=${id}><img src="/assets/${ext}.png"> <br><a href="/projects/${pid}/download_file?uid=${id}" data-filetype="txt" class="file">` +
             `${name}</a><span onClick="delete_file(event)" class="del_file"><i class="glyphicon glyphicon-remove"></i></span></li>`
         $j(".fileManager").prepend(item)
     }

     function minify(f) {
         return f.length > 20 ? f.substr(0, 20) + '...' : f
     }

     function file_icon(extension) {
         switch (extension.toLowerCase().replace('.', '')) {
             case 'txt':
                 return 'txt'
             case 'doc', 'docx':
                 return 'doc'
             case 'jpg':
                 return 'jpg'
             case 'png':
                 return 'png'
             case 'ppt', 'pptx':
                 return 'ppt'
             case 'svg':
                 return 'svg'
             case 'xls', 'xlsx':
                 return 'xls'
             case 'csv':
                 return 'csv'
             case 'pdf':
                 return 'pdf'
             case 'tbl':
                 return 'tbl'
             default:
                 return 'general'
         }
     }

     function load_text_content(id) {
         let std_id = id.split('_')[0]
         let item_id = id.split('_')[1]
         $j("#text_content").attr('data-selected', id)
         if (item_id.startsWith("method"))
             $j("#text_content").show()
         else
             $j("#tbl_file_content").show()
         $j.ajax({
             type: 'GET',
             url: pid + '/text_content',
             data: {
                 std_id,
                 item_id
             },
             success: result => {

                 if (!result) {
                     alert('Error retrieving content!')
                     return
                 }
                 if (item_id.startsWith("method"))
                     $j('#txt_file_content').val(result.data)
                 else {

                     if (result.data.length > 10) {
                         console.log(result.data)
                         $j('.tableInpOut').html(result.data);
                     } else {
                         $j('.tableInpOut').html('<table class="table tableXs tableInpOut"><thead class="thead-dark"><tr></tr></thead><tbody></tbody></table>');
                     }

                 }

             }
         })
     }
     $j(".fileManager").on("click", ".file", function (event) {
         $j('.file').each(function () {
             $j(this).removeClass("file_selected")
         });
         $j(this).addClass("file_selected")
     })

     function bounce(item, text) {
         item.addClass('animate')
         setTimeout(() => {
             item.css('transform', 'scale(2)')
             item.css('opacity', '0')
         }, 1);
         setTimeout(() => {
             item.css('transform', 'scale(1)')
             item.css('opacity', '1')
             item.text(text)
         }, 300);
     }

     function delete_file(e) {
         if (confirm('Are you sure?')) {
             let data = {
                 'uid': $j(e.target).closest('li').attr('data-id')
             }
             $j.ajax({
                 type: 'DELETE',
                 url: pid + '/delete_project_file',
                 data,
                 success: result => {
                     $j(e.target).closest('li').remove()
                     let origin = $j("#" + $j("#selected_tree_item_id").val() + " a span")
                     bounce(origin, parseInt(origin.text()) - 1)
                     console.log('the file was deleted!')
                 }
             })
         }
     }

     function update_method(std_id, method_id, content) {
         $j.ajax({
             type: 'PATCH',
             url: pid + '/update_method',
             data: {
                 std_id,
                 method_id,
                 content
             },
             success: result => {
                 console.log('Content saved successfully!')
             }
         })
     }

     $j('#btn_save_content').on('click', () => {
         let std_id = $j("#text_content").attr('data-selected').split('_')[0]
         let method_id = $j("#text_content").attr('data-selected').split('_')[1]
         let content = $j("#txt_file_content").val()
         console.log(content)
         update_method(std_id, method_id, content)
     })

     function showPreDefinedCols(e) {
         $j(".arrow_box").css({
             display: "block",
             left: $j(e.target).position().left + 120,
             top: $j(e.target).position().top - 10
         });
     }
     $j('body').on('click', '.predef', function () {
         AddCell('.tableInpOut', $j(this).val())
         $j(".arrow_box").css({
             display: "none"
         });
     });

     $j('.customCol').keypress(function (event) {
         var keycode = (event.keyCode ? event.keyCode : event.which);
         if (keycode == '13') {
             AddCell('.tableInpOut', $j(this).val())
             $j(".arrow_box").css({
                 display: "none",
                 left: 200,
                 top: 4
             });
         }
     });

     function AddRow(table) {
         let rowCount = $j(table).rowcount() + 1;
         let newRow;
         $j(table + ' thead tr').find('th').each(function () {
             newRow += '<td contenteditable></td>'
         });
         $j(table + ' tbody').append('<tr>' + newRow + '</tr>')
     }

     $j.fn.columnCount = function () {
         return $j('th', $j(this).find('thead')).length;
     };

     $j.fn.rowcount = function () {
         return $j('tr', $j(this).find('tbody')).length;
     };

     function AddCell(table, newColName) {
         let colCount = $j(table).columnCount() + 1;
         if (newColName.length < 3) {
             alert("Please enter a valid column name!");
             return;
         }
         if ($j(table).find('thead tr').find('th').length == 0)
             $j(table).find('thead tr').append('<th>' + newColName + '</th>')
         else
             $j(table).find('thead tr').find('th').eq(colCount - 2).after('<th>' + newColName + '</th>');
         $j(table).find('tr').each(function () {
             $j(this).find('td').eq(colCount - 2).after('<td contenteditable></td>');
         });
     }

     function update_iotable(std_id, table_id, content) {
         $j.ajax({
             type: 'PATCH',
             url: pid + '/update_iotable',
             data: {
                 std_id,
                 table_id,
                 content
             },
             success: result => {
                 alert('Content saved successfully!')
             }
         })
     }

     $j("#btn_update_tables").on("click", () => {
         let std_id = $j("#text_content").attr('data-selected').split('_')[0]
         let table_id = $j("#text_content").attr('data-selected').split('_')[1]
         let content = $j('.tableInpOut').prop('outerHTML')
         update_iotable(std_id, table_id, content)
     })
 </script>