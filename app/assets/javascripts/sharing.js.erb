<% environment.context_class.instance_eval { include ImagesHelper } %>
<% environment.context_class.instance_eval { include Seek::Util.routes } %>

var Sharing = {
  // Get current resource's project IDs, either directly from the project selector dropdown,
  //  or implicitly through the selected study/investigation.
  getSelectedProjectIds: function () {
    if (Sharing.projectsSelector) {
      return Sharing.projectsSelector.selected.map(function (x) { return x.id });
    } else if (Sharing.implicitProjects && Sharing.implicitProjects.length) {
      return Sharing.implicitProjects.map(function (x) { return x.id });
    } else {
      return [];
    }
  },
  addPermission: function (permission, preserveAccessType) {
    if (!Sharing.permissionsTable)
        return;
    // Update if already existing, otherwise add a new row
    for (var i = 0; i < Sharing.permissionsTable.permissions.length; i++) {
      var p = Sharing.permissionsTable.permissions[i];
      if (p.contributor_type == permission.contributor_type && p.contributor_id == permission.contributor_id) {
        if (preserveAccessType)
          permission.access_type = p.access_type;
        Sharing.permissionsTable.permissions.splice(i, 1, permission);
        return false;
      }
    }

    // This ensures that if a project permission is added, and that project is associated with the resource, it gains
    //  the "isMandatory" flag.
    if (permission.contributor_type === 'Project' && Sharing.projectsSelector) {
      for (var j = 0; j < Sharing.projectsSelector.selected.length; j++) {
        if (Sharing.projectsSelector.selected[j].id === permission.contributor_id) {
          permission.isMandatory = true;
          break;
        }
      }
    }

    Sharing.permissionsTable.permissions.push(permission);
  },

  // Add a permission when a new project is associated with the resource via the dropdown menu
  addPermissionForProject: function (project) {
      Sharing.addPermission({
        contributor_type: 'Project',
        contributor_id: project.id,
        title: project.title,
        access_type: Sharing.associatedProjectAccessType,
        isMandatory: true }, true);
  },

  removeMandatoryProjectPermissions: function () {
    if (!Sharing.permissionsTable)
      return;
    var indices = [];
    for (var i = Sharing.permissionsTable.permissions.length - 1; i >= 0; i--) {
      if (Sharing.permissionsTable.permissions[i].contributor_type === 'Project' &&
          Sharing.permissionsTable.permissions[i].isMandatory) {
        Sharing.permissionsTable.permissions.splice(i, 1);
      }
    }
  },

  removePermissionForProject: function (project) {
    if (!Sharing.permissionsTable)
        return;
    for (var i = 0; i < Sharing.permissionsTable.permissions.length; i++) {
      if (Sharing.permissionsTable.permissions[i].contributor_id === project.id)
        break;
    }
    if (confirm('Do you want to remove any permissions for ' + project.title + '?')) {
      Sharing.permissionsTable.permissions.splice(i, 1);
    } else {
      Sharing.permissionsTable.permissions[i].isMandatory = false;
    }
  },

  requestInstitutionsUrl: '<%= request_institutions_projects_path %>',
  requestAllInstitutionsUrl: '<%= request_all_sharing_form_institutions_path %>',

  accessTypes: {
    noAccess: <%= Policy::NO_ACCESS %>,
    visible: <%= Policy::VISIBLE %>,
    accessible: <%= Policy::ACCESSIBLE %>,
    editing: <%= Policy::EDITING %>,
    managing: <%= Policy::MANAGING %>
  },

  associatedProjectAccessType: <%= Seek::Config.default_associated_projects_access_type %>,
  allVisitorsAccessType: <%= Seek::Config.default_all_visitors_access_type %>,
  maxPublicAccessType: <%= Seek::Config.max_all_visitors_access_type %>,

  permissionsChanged: function () {
    if (originalPolicy.access_type !== Sharing.permissionsTable.publicPermission.access_type)
      return true;
    if (originalPolicy.permissions.length !== Sharing.permissionsTable.permissions.length)
      return true;
    for (var i = 0; i < Sharing.permissionsTable.permissions.length; i++) {
      for (var j = 0; j < originalPolicy.permissions.length; j++) {
          var p1 = Sharing.permissionsTable.permissions[i];
          var p2 = originalPolicy.permissions[j];
          if (p1.contributor_type == p2.contributor_type &&
              p1.contributor_id == p2.contributor_id &&
              p1.access_type !== p2.access_type)
              return true;
      }
    }

    return false;
  },

  applyPolicy: function (policy) {
      if (!Sharing.permissionsTable)
          return;

      Sharing.permissionsTable.permissions = policy.permissions.slice(); // Copy the permissions rather than just reference
      Sharing.permissionsTable.publicPermission.access_type = policy.access_type;
  },

  // Ask if they want to use the default policy (if there is one)
  defaultPolicyPrompt: function (project, skipPrompt) {
      if (!Sharing.permissionsTable)
          return;

      if (Sharing.defaultPolicies[project.id] && (skipPrompt || confirm('' + project.title + ' has a default policy specified, do you want to apply it?'))) {
          Sharing.applyPolicy(Sharing.defaultPolicies[project.id]);
      } else { // Otherwise just add a permission for the project
          Sharing.addPermissionForProject(project);
      }
  }
};

// To do: Make this a property of the permissions table, and remove "Accessible" for things that can't be downloaded
Sharing.orderedAccessTypes = [
  Sharing.accessTypes.noAccess,
  Sharing.accessTypes.visible,
  Sharing.accessTypes.accessible,
  Sharing.accessTypes.editing,
  Sharing.accessTypes.managing
];

Vue.component('permissions-table', {
  props: ['publicPermission', 'permissions', 'downloadable'],
  template:
  '<table class="permissions-table" id="permissions-table">' +
  '<thead>' +
  '<tr>' +
  '<th class="name-column"></th>' +
  '<th class="permission-column" v-for="accessType in accessTypes" :class="accessType.classes">{{ accessType.title }}</th>' +
  '<th class="actions-column"></th>' +
  '</tr>' +
  '</thead>' +
  '<tbody>' +
  '<tr is="permission-row" class="public-permission-row" :permission="publicPermission" :access-types="accessTypes" :public-access-type="publicPermission.access_type" field-prefix-orig="policy_attributes"></tr>' +
  '<tr is="permission-row" v-for="(permission, index) in sortedPermissions" :index="index" :permission="permission" :access-types="accessTypes" :public-access-type="publicPermission.access_type" v-on:delete-permission="deletePermission(index)"></tr>' +
  '</tbody>'+
  '</table>',
  data: function () {
    return {
      accessTypes: [
        { title: 'No Access', value: Sharing.accessTypes.noAccess, classes: 'no-access' },
        { title: 'View', value: Sharing.accessTypes.visible },
        { title: 'Download', value: Sharing.accessTypes.accessible, classes: this.downloadable ? '' : 'hidden' },
        { title: 'Edit', value: Sharing.accessTypes.editing },
        { title: 'Manage', value: Sharing.accessTypes.managing }
      ]
    };
  },
  computed: {
    sortedPermissions: function () {
      return this.permissions.sort(function (a, b) {
        return (b.isMandatory || false) - (a.isMandatory || false);
      });
    }
  },
  methods: {
    deletePermission: function (index) {
      this.permissions.splice(index, 1);
    }
  }
});

Vue.component('permission-row', {
  props: ['index', 'permission', 'accessTypes', 'publicAccessType', 'fieldPrefixOrig'],
  template:
  '<tr class="permission-row" :class="{ mandatory: permission.isMandatory, hidden: permission.contributor_type === \'FavouriteGroup\' }">' +
  '<td class="name-cell" :title="permission.title"><span class="type-icon-wrapper"><img :src="typeIcon" class="type-icon" :title="permission.contributor_type || \'All visitors\'"/></span> {{ permission.title }}' +
  '<input v-if="permission.contributor_type" type="hidden" :name="fieldPrefix+\'[contributor_type]\'" v-model="permission.contributor_type"/>' +
  '<input v-if="permission.contributor_id" type="hidden" :name="fieldPrefix+\'[contributor_id]\'" v-model="permission.contributor_id"/>' +
  '</td>' +
  '<td is="privilege-cell" v-for="accessType in accessTypes" :fieldPrefix="fieldPrefix" :permission="permission" :access-type="accessType" :public-access-type="publicAccessType"></td>' +
  '<td class="actions-cell">'+
  '<a v-if="!permission.isMandatory" @click="$emit(\'delete-permission\')" class="clickable remove-button" title="Remove this permission">' +
  '<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>' +
  '</a>' +
  '</td>' +
  '</tr>',
  computed: {
    fieldPrefix: function () {
      return (this.fieldPrefixOrig ? this.fieldPrefixOrig : 'policy_attributes[permissions_attributes][' + this.index + ']');
    },
    typeIcon: function () {
      switch(this.permission.contributor_type) {
        case 'Person':
          return '<%= asset_path(icon_filename_for_key('person')) %>';
        case 'Project':
          return '<%= asset_path(icon_filename_for_key('project')) %>';
        case 'Programme':
          return '<%= asset_path(icon_filename_for_key('programme')) %>';
        case 'Institution':
          return '<%= asset_path(icon_filename_for_key('institution')) %>';
        case 'WorkGroup':
          return '<%= asset_path(icon_filename_for_key('work_group')) %>';
      }

      return '<%= asset_path icon_filename_for_key('world') %>';
    }
  }
});

Vue.component('privilege-cell', {
  props: ['fieldPrefix', 'permission', 'accessType', 'publicAccessType'],
  template:
  '<td class="privilege-cell" :class="classes" @click="toggleValue">' +
  '<input v-if="!disabled" autocomplete="off" type="radio" :name="fieldPrefix+\'[access_type]\'" v-model="permission.access_type" :value="accessType.value"/>' +
  '</td>',
  computed: {
    disabled: function () {
      //return (this.permission.isPublic ? (this.accessType.value > Sharing.maxPublicAccessType) : (this.accessType.value < this.publicAccessType));
      return (this.permission.isPublic ? (this.accessType.value > Sharing.maxPublicAccessType) : false);
    },
    enabled: function () {
      return this.permission.access_type === this.accessType.value ||
          (this.accessType.value !== Sharing.accessTypes.noAccess && this.permission.access_type > this.accessType.value);
    },
    classes: function () {
      return { 'enabled': !this.disabled && this.enabled,
        'disabled': this.disabled,
        'hidden': this.accessType.classes === 'hidden',
        'no-access': this.accessType.value === Sharing.accessTypes.noAccess };
    }
  },
  methods: {
    toggleValue: function (e) {
      // Stop clicks on the radio button from triggering this function and un-setting the access type
      if (e.target.nodeName.toLowerCase() === 'input')
          return;
      if (!this.disabled) {
        // If the existing setting is clicked, decrease the access type
        if (this.permission.access_type === this.accessType.value &&
            this.accessType.value !== Sharing.accessTypes.noAccess) {
          var index = Sharing.orderedAccessTypes.indexOf(this.accessType.value) - 1;
          if (index >= 0) {
            this.permission.access_type = Sharing.orderedAccessTypes[index];
          }
        } else {
          this.permission.access_type = this.accessType.value;
        }
      }
    }
  }
});
