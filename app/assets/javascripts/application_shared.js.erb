// Place your application-specific JavaScript functions and classes here
// This file is automatically included by javascript_include_tag :defaults

var tabber_ids = [];
var tabberOptions = {
    onLoad: function () {
        displayTabs();
    }
};

function displayTabs() {
    for (var i = 0; i < tabber_ids.length; i++) {
        var tabber_id = tabber_ids[i];
        var spinner = $j('#' + tabber_id + '_spinner');
        if (spinner.length) {
            spinner.hide();
            $j('#' + tabber_id).fadeIn();
        }
    }
}

function checkNotInList(id, list) {
    rtn = true;

    for (var i = 0; i < list.length; i++)
        if (list[i][1] == id) {
            rtn = false;
            break;
        }

    return (rtn);
}

function clearList(name) {
    $j('#' + name + ' option').remove();
}

//http://snipplr.com/view.php?codeview&id=1384
function insertAtCursor(myField, myValue) {
    myField = $j('#' + myField)[0];

    textAreaScrollPosition = myField.scrollTop;

    //IE support
    if (document.selection) {
        myField.focus();
        sel = document.selection.createRange();
        sel.text = myValue;
    }
    //MOZILLA/NETSCAPE support
    else if (myField.selectionStart || myField.selectionStart == '0') {
        var startPos = myField.selectionStart;
        var endPos = myField.selectionEnd;
        myField.value = myField.value.substring(0, startPos)
            + myValue
            + myField.value.substring(endPos, myField.value.length);
        myField.focus();
        myField.setSelectionRange(startPos + myValue.length, startPos + myValue.length);
    } else {
        myField.value += myValue;
    }

    myField.scrollTop = textAreaScrollPosition;
}

//only allows numbers to by typed
function onlyNumbers(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
        return false;

    return true;
}

//only allows float numbers to by typed
function onlyFloatNumbers(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
    //this is dot charCode
        if (charCode == 46)
            return true;
        else
            return false;

    return true;
}

function decodeHTML(str) {
    return String(str)
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#0?39;/g, "'")
        .replace(/&#x27;/g, "'");
}

function encodeHTML(str) {
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
        .replace(/'/g, '&#x27;');
}

// taken from stack overflow - http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// Takes an object of arbitrary depth, and a period separated "path" and returns the value.
// e.g. digValue({a: {b: {c: 1}}}, 'a.b.c') => 1
function digValue(object, path) {
    var keys = path.split('.');

    var value = object[keys.shift()];

    keys.forEach(function (key) {
        if (typeof value === 'undefined') {
            return value;
        }
        value = value[key];
    });

    return value;
}

/* JQuery functions */
(function ($j) {
    // Adds an AJAX loader icon to the element.
    // Example usage:
    // $j('#some_container').spinner('add');
    // $j('#some_container').spinner('remove');
    // $j('#some_container').spinner('add', { size: 'large' });
    // $j('#some_container').show().html('').spinner('add');
    $j.fn.spinner = function (action, opts) {
        var options = opts || {};
        if (action === 'add') {
            return this.each(function () {
                if (!$j(this).data('spinnerElement') || !$j('.seek-spinner', $j(this)).length) {
                    var spinner;
                    if (options.size == 'large') {
                        spinner = $j('<%= image_tag("ajax-loader-large.gif", class: 'seek-spinner').html_safe %>');
                    } else {
                        spinner = $j('<%= image_tag("ajax-loader.gif", class: 'seek-spinner').html_safe %>');
                    }
                    $j(this).append(spinner);
                    $j(this).data('spinnerElement', spinner);
                }
            });
        } else if (action === 'remove') {
            return this.each(function () {
                if ($j(this).data('spinnerElement')) {
                    $j(this).data('spinnerElement').remove();
                    $j(this).data('spinnerElement', null);
                }
            });
        }
    };

    // Highlights the selected elements for 1 second. Similar to `Effect.highlight`.
    // Example usage:
    // $j('#an_element').highlight();
    // $j('#new_item').appendTo($j('#container')).highlight('green');
    $j.fn.highlight = function (colour) {
        var cssClass = colour ? ('js-highlight-' + colour) : 'js-highlight'
        var elements = $j(this);
        elements.addClass(cssClass);
        setTimeout(function () {
            elements.removeClass(cssClass)
        }, 1100);
    };

    $j.fn.easyTabs = function () {
        return this.each(function(i, container) {
            $j(this).find('> ul.easytabs-nav > li').click(function () {
                $j(container).find('> .easytabs-pane').removeClass('active');
                $j(container).find('> .easytabs-pane:eq(' +  $j(this).index() + ')').addClass('active');
                $j(this).siblings().removeClass('active');
                $j(this).addClass('active');
            });
            // Show first tab by default
            $j(this).find('> ul.easytabs-nav > li:eq(0)').addClass('active');
            $j(this).find('> .easytabs-pane:eq(0)').addClass('active');
        });
    };
}(jQuery));

$j(document).ready(function () {
    $j('.collapse').on('show.bs.collapse', function () {
        $j(this).parent().find('.panel-heading .caret').removeClass('caret').addClass('caret-up');
    }).on('hide.bs.collapse', function () {
        $j(this).parent().find('.panel-heading .caret-up').removeClass('caret-up').addClass('caret');
    });

    // Similar to bootstrap's 'collapse' but doesn't require IDs, will collapse the sibling div.panel-collapse.
    $j('body').on('click.collapse-next.data-api', '[data-toggle=collapse-next]', function (e) {
        $j(this).siblings('.panel-collapse').collapse('toggle');
    });

    // Swap select contents when a checkbox is checked
    $j('[data-role="seek-swappable-select-toggle"]').change(function () {
        var group = $j(this).parents('[data-role="seek-swappable-select-group"]');
        var select = $j('[data-role="seek-swappable-select"]', group);
        var alt = $j('[data-role="seek-swappable-select-alt"]', group);

        var temp = select.html();
        select.html(alt.html());
        alt.html(temp);
    });

    // Show a summary with link to expand large sections of text
    $j('[data-role="seek-expandable-link"]').click(function () {
        var container = $j(this).parents('[data-role="seek-expandable"]');
        var ellipsis = $j('[data-role="seek-expandable-ellipsis"]', container);
        var remainder = $j('[data-role="seek-expandable-hidden"]', container);

        if ($j(this)[0].innerHTML === '(Expand)') {
            ellipsis.hide();
            remainder.show();
            $j(this).html('(Collapse)');
        } else {
            ellipsis.show();
            remainder.hide();
            $j(this).html('(Expand)');
        }

        return false;
    });

    // Handle adding an item from a fancy_multiselect dropdown.
    $j('[data-role="seek-fancy-multiselect"] select[data-associations-list-id]').change(function () {
        var listElement = $j('#' + $j(this).data('associationsListId'));
        var listObject = listElement.data('associationList');
        var selectedOption = $j('option:selected', $j(this));
        if (!selectedOption.val()) {
            return;
        }
        var item = { id: parseInt(selectedOption.val()),
            title: selectedOption.text() };

        // Load preview
        if ($j(this).data('previewUrl')) {
            $j.get($j(this).data('previewUrl'), { id: item.id });
        }

        if (!listObject.exists(function (i) { return i.id === item.id })) {
            listObject.add(item);
        } else {
            // Highlight existing item if its already there
            $j('[value=' + item.id + ']', listElement).parent().highlight('blue');
        }
    });

    $j('#citation-style-select').change(function () {
        var style = $j(this).val();
        var url = $j(this).data('url');
        var target = $j('#citation');
        var currentStyle = $j('#citation').data('citationStyle');

        if (style && style !== currentStyle) {
            $j.ajax({
                url: url,
                data: { style: style },
                dataType: 'html',
                success: function (html) {
                    target.html(html);
                },
                error: function () {
                    target.html('Could not generate citation in that style.');
                },
                complete: function () {
                    target.spinner('remove');
                }
            });
            target.spinner('add');
        }
    }).change();

    new Clipboard('.clipboard-btn');

    $j('.expand-filter-category-link').click(function () {
        var cat = $j(this).parents(".filter-category");
        cat.toggleClass("collapsed");

        if (cat.hasClass("collapsed")) {
            $j(this).text("More...");
        } else {
            $j(this).text("Less");
        }

        return false;
    })

    $j('[data-role="seek-date-filter"]').each(function () {
        var filter = $j(this);
        var select = $j('[data-role="seek-date-filter-select"]', filter);
        var custom = $j('[data-role="seek-date-filter-custom"]', filter);
        var button = $j('[data-role="seek-date-filter-btn"]', filter);
        var start = $j('[data-role="seek-date-filter-period-start"]', filter);
        var end = $j('[data-role="seek-date-filter-period-end"]', filter);

        if (select.val() === 'custom') {
            custom.show();
        } else {
            custom.hide();
        }

        start.datetimepicker({ format: 'YYYY-MM-DD' });
        end.datetimepicker({ format: 'YYYY-MM-DD' });

        button.click(function () {
            if (start.val()) {
                var val = start.val();
                if (end.val()) {
                    val += ('/' + end.val());
                }
                window.location = filter.data('applyFilterUrl').replace('_date_',  val);
            } else {
                alert("Please supply a start date");
                return false;
            }
        });

        select.change(function () {
            var val = $j(this).val();

            if (val) {
                if (val === 'other') {
                    return false;
                }
                if (val === 'custom') {
                    custom.fadeIn();
                } else {
                    custom.fadeOut();
                    window.location = filter.data('applyFilterUrl').replace('_date_',  val);
                }
            } else {
                custom.fadeOut();
                window.location = filter.data('removeFilterUrl');
            }
        });
    });
});
