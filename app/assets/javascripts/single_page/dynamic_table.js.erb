<% environment.context_class.instance_eval { include Seek::Util.routes } %>
  const instanceName = "<%= Seek::Config.instance_name %>";

const rowStatus = {
  new: "new",
  delete: "delete",
  update: "update",
  empty: "empty",
  noAction: ""
};
const dtErrClass = "row-error",
  dtSuccessClass = "row-success",
  dtDeletedClass = "disabled",
  dtRowDelete = "row-delete";
const defaultCols = [{
  width: "10px",
  className: "text-center",
  mRender: function(data, type, full) {
    return "<td><input class='row-select' type='checkbox' onClick='handleSelect($j(this))'/></td>";
  }
}];

const objectInputTemp = '<input type="hidden" name="_NAME_[]" id="inpt-_NAME_" value="" autocomplete="off" />' +
  '<select name="_NAME_[]" id="select-_NAME_" class="form-control _EXTRACLASS_" title="_TITLE_" data-role="seek-objectsinput" ' +
  'data-tags-limit="100" multiple="multiple" style="background-color: coral;" data-typeahead-template="typeahead/single_pages_samples"' +
  'data-typeahead-query-url="_URL_">_OPTIONS_</select>';

const typeaheadUrl = "<%= typeahead_samples_path(linked_sample_type_id: '_LINKED_') %>";

const handleSelect = (e) => {
  $j(e).parents("table").DataTable().row(e.closest("tr")).data()[0] = e.is(":checked")
  if (!e.is(":checked")) {
    // Hide DT Select all button
    const dtSelectAll = $j(e).parents(".dataTables_wrapper").find(".dt_select_all");
    dtSelectAll.html("Select all rows")
    dtSelectAll.css("display", "none")
  }
  const dtName = $j(e).parents("table").data("dtname")
  window[dtName].setPermissionBTNActivity()
}

(function($j) {
  $j.dynamicTable = function(table) {
    this.table = table instanceof $j ? table : $j(table);
  };
  $j.dynamicTable.prototype = {
    init: function(rows, columns, options = {}) {
      columns.forEach((c) => {
        c["render"] = function(data, type, full, meta) {
          if (c.multi_link) {
            data = data && Array.isArray(data) ? data : [data];
            data = data[0]?.id ? data : [];
            const existingOptions = data.map((e) => `<option selected="selected" title="ID: ${e.id}" value="${e.id}">${e.title}</option>`).join("");
            if (options.readonly) {
              return data.map((e) => `<span title="ID: ${e.id}" class="badge">${e.title}</span>`).join(" ");
            } else {
              const url = typeaheadUrl.replace("_LINKED_", c.linked_sample_type);
              const objectInputName = data.map((e) => e.id).join('-') + '-' + crypto.randomUUID();
              setTimeout(ObjectsInput.init);

              const linkedSamples = retrieveLinkedSamples(url);
              const linkedSampleIds = linkedSamples.map((ls) => ls.id);
              const unLinkedSamples = data.reduce(function(filtered, sample) {
                if(!linkedSampleIds.includes(parseInt(sample.id))){
                  filtered.push(sample);
                }
                return filtered;
              }, []);
              const hasUnlinkedSamples = unLinkedSamples.length > 0 ? true : false;

              const extraClass = hasUnlinkedSamples ? 'select2__error' : '';
              const titleText = hasUnlinkedSamples ? `Sample(s) '${unLinkedSamples.map(uls => uls.title).join(', ')}' not recognised as sources. Please correct this issue!` : '';

              return objectInputTemp
              .replace(/_NAME_/g, objectInputName)
              .replace('_URL_', url)
              .replace('_OPTIONS_', existingOptions)
              .replace('_EXTRACLASS_', extraClass)
              .replace('_TITLE_', titleText);
            }
          } else if (data === "#HIDDEN") {
            return "<em><small>Hidden</small></em>";
          } else {
            return data;
          }
        };
        c["createdCell"] = function(td, cellData, rowData, row, col) {
          if (cellData == "#HIDDEN") $j(td).addClass("disabled");
        };
				// Changes the id header to an instance id
        if (c.title == "id") c.title = instanceName + " id";
      });
      // Retrieve the column index of the multi-input cells (select2 items)
      // if column has a multi-input cell, it adds the index to the t array (=accumulator)
      let multi_link_idx = columns.reduce((t, c, i) => (c.multi_link ? [...t, i + 1] : t), []);
      // If it's Assay level table keep the first, otherwise hide all of them
      if (options.level == "assay") multi_link_idx = multi_link_idx.slice(1);
      this.hiddenColumns = multi_link_idx;
      columns.unshift(...defaultCols);

      const columnDefs = [{
          orderable: false,
          targets: options.readonly ? [0] : [0, 1]
        },
        {
          targets: options.readonly ? [0, ...multi_link_idx] : [1],
          visible: false,
          searchable: false
        }
      ];
      const editor = this.editor;
      this.table = this.table.DataTable({
        columnDefs,
        columns,
        scrollX: "100%",
        errMode: "throw",
        order: [
          [options.readonly ? 1 : 3, "asc"]
        ],
        pageLength: 25,
        dom: "<'row'<'col-sm-3'l <'toolbar'>><'col-sm-9 dt-btn-container'<'dt-btn-item'f><'dt-btn-item-last'B>>>" +
          "<'row'<'col-sm-12'tr>>" +
          "<'row'<'col-sm-5'i><'col-sm-7'p>>",
        buttons: [
					{
						extend: "csvHtml5",
						text: "Export to CSV",
						exportOptions: {
							// exclude checkbox column
							columns: options.readonly ? [":visible:not(.text-center)"] : [2, ":visible:not(.text-center)"],
						}
					},
					{
						extend: "copy",
						text: "Copy to Clipboard",
						exportOptions: {
							// exclude checkbox column
							columns: options.readonly ? [":visible:not(.text-center)"] : [2, ":visible:not(.text-center)"],
						},
					},
					"colvis"
        ],
        ajax: options.ajax
      });
      this.table.rows.add(rows.map((r) => [null, ...r])).draw();
      if (!options.readonly) {
        const table = this.table;
        const context = this;
        this.table.on("click", "tbody td:not(:has(input))", function() {
					// Makes all cells editable, except column 2 & 3 => Fairdom-seek ID + UUID
					if (![2, 3].includes(this._DT_CellIndex.column)) {
						editor($j(this), table, context);
					}
        });
      }
      if (options.assayId) this.assayId = options.assayId;
      this.options = options;
      this.initHeader(columns);
      this.setSelect2();

      $j('div.toolbar').html("<span class='dt_select_all' style='display:none' onClick='selectAll(this, true)'>Select all rows</span>").addClass("dt-select-all");
    },
    initHeader: function(columns) {
      const requiredCols = columns.map((c, i) => c.required && i).filter((c) => c);
      if (this.options.readonly) {
        const sampleTypes = this.getSampleTypes();
        $j.each(sampleTypes, (i, s) => {
          if (!isNaN(s)) {
            const colIdxs = this.table.columns(`${s}:name`)[0];
            if (colIdxs.length) colIdxs.push(colIdxs[0] - 1);
            this.table.column(function(idx, data, node) {
              if (colIdxs.includes(idx)) $j(node).addClass(`sp-variant-${i % 2}`);
            });
          }
        });
      }
      this.table
        .columns()
        .header()
        .each((x, i) => {
          if (i == 0 && !this.options.readonly) $j(x).append(`<input type='checkbox' onClick='selectAll(this)'/>`);
          else if (requiredCols.includes(i)) {
            $j(x).append("<span class='required-attribute'>*</span>");
          }
          $j(x)
            .attr("title", columns[i].description)
            .attr("data-toggle", "tooltip")
            .attr("data-placement", "top")
            .attr("data-container", "body");
        });
      $j('[data-toggle="tooltip"]').tooltip();
      highlightTitleCol(this.table);
    },
    pasteFromClipboard: function() {
      try {
        navigator.clipboard.readText().then((text) => {
          const colsCount = this.table.columns().data().length;
          const splitter = text.includes("\r\n") ? "\r\n" : "\n";
          const delimeter = "\t";
          const _defaultCols = defaultCols.map((c) => c.defaultValue || "");

          const cols = this.table.settings()[0].aoColumns;
          const sampleLinks = getSampleLinking(cols);
          const sampleLinkIndexes = sampleLinks.map((x) => x.idx).sort((a, b) => b - a);
          const sampleLinksTitles = sampleLinks.map((x) => x.title);

          const rows = text
            .split(splitter)
            .filter((x) => x)
            .map((r) => {
              // Preserve row status, id and uuid
              let splitted = [rowStatus.new, "", ""].concat(r.split(delimeter));
              const missingColsCount = colsCount - defaultCols.length - splitted.length;
              splitted = _defaultCols.concat(splitted);

              // Preserve empty placeholder for columns of type of 'Registered Sample (multiple)'
              sampleLinkIndexes.forEach((x) => splitted.splice(x, 0, []));

              return missingColsCount < 0 ?
                splitted.slice(0, colsCount) :
                splitted.concat(Array(missingColsCount).fill(""));
            })
            .filter((x) => x);

          this.table.rows.add(rows).draw();

          if (sampleLinksTitles.length)
            alert(
              "No value is pasted for the following column(s): \n" +
              sampleLinksTitles.map((x) => `"${x}"`).join(", ") +
              "\nYou need to manually input them."
            );
        }).catch((error) =>{
        alert(`Paste action aborted:\n\n${error}\n\nNote: Some browsers require to click 'paste' to paste the information in the table.`);
        });

      } catch (error) {
        if (error instanceof TypeError && navigator.userAgent.toLowerCase().includes('firefox')){
          if(confirm('Your Firefox browser might not support clipboard access. By clicking OK, you\'ll be redirected to the official documentation.')){
            window.open("<%= Seek::Help::HelpDictionary.instance.help_link(:clipboard_api_mozilla) %>", "_blank");
          }
        }
        console.log('An error occurred:', error);
      }
    },
    newRow: function() {
      const colsCount = this.table.columns().data().length;
      const arr = defaultCols.map((c) => c.defaultValue || "").concat(Array(colsCount - defaultCols.length).fill(""));
      const cols = this.table.settings()[0].aoColumns;
      const indexes = getStatusIndexes(cols);
      const sampleLinkIndexes = getSampleLinking(cols).map((x) => x.idx);
      indexes.forEach((x) => (arr[x] = rowStatus.new));
      sampleLinkIndexes.forEach((x) => (arr[x] = []));
      this.table.row.add(arr).draw();
      updateContainerHeight();
      highlightTitleCol(this.table);
    },
    setAsDeleted: function() {
      const indexes = getStatusIndexes(this.table.settings()[0].aoColumns);
      const deleteRowInx = [];
      const table = this.table;
      table.rows(function(idx, data, node) {
        let hasId = false;
        // If selected
        if (data[0]) {
          indexes.forEach((x) => {
            // empty status is a placeholder for missing samples
            // Check if the sample has an ID (data[x+1]) (it's an existing sample)
            if (data[x + 1]) {
              data[x] = rowStatus.delete;
              $j(node).find("td").addClass(dtRowDelete);
            } else hasId = true;
          });
          // There is only one status column in regular table
          if (hasId) deleteRowInx.push(idx);
        }
      });
      if (deleteRowInx.length) table.rows(deleteRowInx).remove().draw();
    },
    save: async function() {
      const {
        enableLoading,
        disableLoading
      } = this.options;
      if (enableLoading) enableLoading();
      this.resetClasses();
      //=======================DELETE==================================
      const deletedSamples = this.getSamples(rowStatus.delete);
      //* Delete action is applied to all samples in a row
      let res = await batchDeleteSample(deletedSamples);
      if (res) handleResponse(this.table, deletedSamples)(res);
      //=======================UPDATE==================================
      const updatedSamples = this.getSamples(rowStatus.update);
      res = await batchUpdateSample(updatedSamples);
      if (res) handleResponse(this.table, updatedSamples)(res);
      //=======================CREATE==================================
      const sampleTypeIds = this.getSampleTypes();
      for (const s of sampleTypeIds) {
        const newSamples = this.getSamples(rowStatus.new, s);
        res = await batchCreateSample(newSamples, projectDefaultPolicy);
        if (res) {
          handleResponse(this.table, newSamples)(res);
        }
      }
      if (this.options.callback && typeof this.options.callback === "function") {
        this.options.callback();
      }
      if (disableLoading) disableLoading();
    },
    headers: function() {
      return this.table
        .columns()
        .header()
        .toArray()
        .map((x) => x.innerText)
        .slice(defaultCols.length);
    },
    getSampleTypes: function() {
      return this.table
        .settings()[0]
        .aoColumns.map((c) => c.name)
        .filter((value, index, self) => value && self.indexOf(value) === index);
    },
    getSamples: function(status, sampleTypeId = null) {
      const rowsIdx = this.table.rows().indexes().toArray();
      const sampleTypeIds = sampleTypeId ? [sampleTypeId] : this.getSampleTypes();
      return sampleTypeIds.map((s) => {
        const columnNames = this.table
          .settings()[0]
          .aoColumns.filter((c) => c.name === s)
          .map((c) => c.title);
        return {
          pid: pid.toString(),
          sampleTypeId: s,
          assayId: this.assayId,
          // Returning those samples that apply the 'status'
          samples: rowsIdx.reduce((filtered, i) => {
            const item = this.table.cells(i, `${s}:name`).data().toArray();
            if (item[0] == status)
              filtered.push({
                id: item[1],
                exId: `${i}-${s}`,
                data: item.reduce((obj, curr, j) => ({
                  ...obj,
                  [columnNames[j]]: checkSampleLink(curr)
                }), {})
              });
            return filtered;
          }, [])
        };
      });
    },
    log: function() {
      console.log(this.table.rows().data());
    },
    getCvId: function(colIndex) {
      return this.table.settings()[0].aoColumns[colIndex].cv_id;
    },
    editor: function(elem, table, context) {
      elem
        .attr("contenteditable", true)
        .focus()
        .unbind()
        .blur(function() {
          table.cell(elem).data(elem.text());
          elem.attr("contenteditable", false);
          table.columns.adjust();
          handleCellUpdate(table, elem);
        });

      const colIndex = table.cell(elem).index().column;
      const cvId = context.getCvId(colIndex);
      if (cvId) setAutoComplete(elem, cvId);
    },
    resetClasses: function() {
      $j(`#${this.table.tables().nodes().to$().attr("id")} td`).removeClass(dtErrClass);
    },
    toggleSampleType: function(sampleTypeId, visible) {
      const hiddenCols = this.hiddenColumns;
      const toBeShown = [];
      if (!visible) return this.table.columns(`${sampleTypeId}:name`).visible(false);
      this.table.columns(`${sampleTypeId}:name`).every((c) => {
        !hiddenCols.includes(c) && toBeShown.push(c);
      });
      this.table.columns(toBeShown).visible(true);
    },
    setPermissionBTNActivity: function() {
      const tbl = $j(this.table.table().container())
      const permissionBtn = tbl.closest('.tab-pane').find('.btn_set_permission')
      $j(permissionBtn).prop("disabled", false)
      const indexes = getStatusIndexes(this.table.settings()[0].aoColumns);
      this.table.rows(function(idx, data, node) {
        if (data[0])
          indexes.forEach((x) => {
            if (data[x] == rowStatus.new) {
              $j(permissionBtn).prop("disabled", true);
              return
            }
          });
      });
    },
    selectedSampleIds: function() {
      const sampleIds = []
      const indexes = getStatusIndexes(this.table.settings()[0].aoColumns);
      this.table.rows(function(idx, data, node) {
        if (data[0])
          indexes.forEach((x) => {
            if (data[x + 1]) sampleIds.push(data[x + 1])
          })
      });
      return sampleIds;
    },
    setSelect2: function() {
      $j(this.table.table().container()).on("select2:select select2:unselect", 'td', function(e) {
        const td = $j(this);
        const table = td.parents("table").DataTable();

        const values = td.find("option").map((_index, opt) => {
          if (opt.value != "") return {
            id: opt.value,
            title: opt.innerText
          };
        }).toArray();

        const updatedValues = e.params.data.selected ? values : values.filter(({
          id,
          title
        }) => {
          if (id !== e.params.data.id) return {
            id,
            title
          };
        });

        table.cell(td).data(updatedValues);
        handleCellUpdate(table, td);
        table.columns.adjust();
      });
    }
  };
})(jQuery);

function highlightTitleCol(table) {
  table.settings()[0].aoColumns.forEach((c, i) => {
    if (c.is_title) $j(table.column(i).nodes()).addClass("highlight");
  });
}

function checkSampleLink(value) {
  if (Array.isArray(value)) {
    return value.map((x) => x.id).join(",");
  } else return value;
}

function sampleStatus(table, rowId, sampleTypeId, value = "notSet") {
  const sampleStatusIndex = table.settings()[0].aoColumns.findIndex((x) => x?.status && x.name == sampleTypeId);
  if (value !== "notSet") table.row(rowId).data()[sampleStatusIndex] = value;
  else return table.row(rowId).data()[sampleStatusIndex];
}

function getStatusIndexes(arr) {
  return arr.filter((x) => x?.status).map((x) => x.idx);
}

function getSampleLinking(arr) {
  return arr.filter((x) => x.linked_sample_type).map(({
    idx,
    title
  }) => ({
    idx,
    title
  }));
}

function handleCellUpdate(table, cell) {
  const {
    row,
    column
  } = table.cell(cell).index();
  const colName = table.settings()[0].aoColumns[column].name;
  // sampleType status col index
  const sampleStatusIndex = table.settings()[0].aoColumns.findIndex((x) => x?.status && x.name == colName);
  // If it is a new sample, then it has to be created
  const status = table.row(row).data()[sampleStatusIndex];
  if (status == rowStatus.empty) {
    table.row(row).data()[sampleStatusIndex] = rowStatus.new;
  } else if (status == "") {
    table.row(row).data()[sampleStatusIndex] = rowStatus.update;
  }
}

function handleResponse(table, sampleTypes) {
  return function(res) {
    if (res.status == "ok") handleSuccess(table, sampleTypes, res);
    else handleFailure(table, res);
  };
}

function selectAll(e, includeHidden = false) {
  const dtTbl = $j(e).parents(".dataTables_wrapper").find("table")[1]
  const dtName = $j(dtTbl).data("dtname")
  const count = window[dtName].table.rows().count()
  if (includeHidden) {
    // This will select all rows containing hidden rows
    performSelect(dtName, true)
    window[dtName].setPermissionBTNActivity()
    $j(e).html(`All ${count} items are selected`)
  } else {
    const checked = $j(e).prop("checked");
    const checkBoxes = $j(e).closest(".dataTables_scroll").find(".row-select");
    const dtSelectAll = $j(e).parents(".dataTables_wrapper").find(".dt_select_all");
    dtSelectAll.css("display", checked && count > 0 ? "block" : "none")

    if (!checked) performSelect(dtName, false)

    $j.each(checkBoxes, function(i, c) {
      $j(c).prop("checked", checked);
      handleSelect($j(c));
    });
  }
}

function performSelect(dtName, select) {
  window[dtName].table.rows(function(idx, data, node) {
    data[0] = select;
    $j(node).find(".row-select").prop("checked", select)
  });
}

function retrieveLinkedSamples(url){
  let linkedSamples;
  $j.ajax({
    async: false,
    url: url,
    contentType: "application/json",
    success: function (data) {
      linkedSamples = data.results;
      // console.log("data", data.results);
    },
    error: function (xhr, status) {
      linkedSamples = []
      console.log(status);
      console.log(xhr.responseText);
    }
  });
  return linkedSamples;
}

const handleFailure = (table, res) => {
  const errors = new Set();
  errors.add("The operation can not be performed for one or some samples. The red cells indicate unacceptable values.");
  res.errors.forEach((error) => {
    const [rowId, sampleTypeId] = error.ex_id.split("-");
    const errorColNames = Object.keys(error.error);
    if (errorColNames.includes("base")) errors.add(error.error["base"]);
    table.cells(rowId, `${sampleTypeId}:name`).every(function() {
      const idx = this.index().column;
      const colTitle = $j(table.column(idx).header()).text().replace("*", "");
      if (errorColNames.includes(colTitle)) {
        $j(this.node()).removeClass(dtSuccessClass).addClass(dtErrClass);
        $j(this.node()).attr("title", error.error[colTitle]);
      } else if (error.error == "Can not be deleted.") {
        $j(this.node()).removeClass(dtSuccessClass).addClass(dtErrClass);
      }
    });
  });
  alert([...errors].reverse().join("\n"));
};

const handleSuccess = (table, sampleTypes, res) => {
  sampleTypes.forEach((s) => {
    s.samples.forEach((sa, k) => {
      const [rowId, sampleTypeId] = sa.exId.split("-");
      table.cells(rowId, `${sampleTypeId}:name`).every(function(rowIdx, columnIdx) {
        // Here id column index is 2 (being read from table.columns() that includes the select column)
        if (res.results && columnIdx == 2) {
          // update created samples' id in the table
          const id = res.results.find((r) => r.ex_id == sa.exId).id;
          this.data(id);
        }
        sampleStatus(table, rowId, sampleTypeId, rowStatus.noAction);
        $j(this.node()).removeClass(dtErrClass).addClass(dtSuccessClass);
      });
    });
  });
};
