<% environment.context_class.instance_eval { include Seek::Util.routes } %>

const ajaxCall = (url, method, params) => {
  const { data, cache, dataType } = params;
  if (!url || !method) throw new Error("Parameter(s) missing");
  return $j.ajax({
    method,
    url,
    data,
    dataType,
    cache: cache || false,
     headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    }
  });
};

function updateBreadcrumb(item) {
  $j(".bcrumb li a").removeClass("active");
  if (item) {
    const elements = {
      project: ["project", "folder"],
      investigation: ["investigation"],
      study: ["study", "source_table", "study_protocol", "study_samples_table", "study_experiment_overview"],
      assay: ["assay", "assay_protocol", "assay_samples_table", "assay_experiment_overview"]
    };
    item = Object.keys(elements).find((e) => elements[e].includes(item.toLowerCase()));
    let index = ["project", "investigation", "study", "assay"].indexOf(item);
    $j(`.bcrumb li:nth-child(${index + 1}) a`).addClass("active");
  }
}

let timer;
function debounce(func, timeout = 300) {
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
}

const batchSampleDeleteStruct = (ex_id, id) => ({
  id,
  ex_id
});

const batchSampleUpdateStruct = (ex_id, attribute_map, id) => ({
  id,
  ex_id,
  data: {
    type: "samples",
    attributes: {
      attribute_map
    }
  }
});

const getAccessType = (code) => {
  switch (code) {
    case 0:
      return "no_access";
    case 1:
      return "view";
    case 2:
      return "download";
    case 3:
      return "edit";
    case 4:
      return "manage";
  }
};

const getAccess = (projectDefaultPolicy) => getAccessType(projectDefaultPolicy?.access_type || 0);

const getPermission = (projectDefaultPolicy, pid) => {
  const t = projectDefaultPolicy?.permissions;
  const accessType =
    t && t.find((x) => x.contributor_type == "Project" && x.contributor_id == pid)?.access_type;
  return getAccessType(accessType || 0);
};

const batchSampleCreateStruct = (
  ex_id,
  attribute_map,
  sample_type_id,
  pid,
  projectDefaultPolicy,
  assay_id = null
) => ({
  ex_id,
  data: {
    type: "samples",
    attributes: {
      policy: {
        access: getAccess(projectDefaultPolicy),
        permissions: [
          {
            resource: { type: "Project", id: pid },
            access: getPermission(projectDefaultPolicy, pid)
          }
        ]
      },
      attribute_map
    },
    tags: null,
    relationships: {
      projects: {
        data: [
          {
            id: pid,
            type: "projects"
          }
        ]
      },
      sample_type: {
        data: {
          id: sample_type_id,
          type: "sample_types"
        }
      },
      ...(assay_id && {
        assays: {
          data: [
            {
              id: assay_id,
              type: "assays"
            }
          ]
        }
      })
    }
  }
});

//** =============Autocomplete============== */
async function setAutoComplete(e, cvId) {
  $j(e).on("input", function () {
    debounce(fetchTerms, 500)($j(e), cvId);
  });
  if ($j(e).autocomplete() && !$j($j(e).autocomplete("widget")).is(":visible")) {
    fetchTerms($j(e), cvId);
  }
}

const setSource = (elem, data) => {
  elem.autocomplete({
    classes: {
      "ui-autocomplete": "highlight"
    },
    source: data.results.map(x => x.text),
    minLength: 0,
    mustMatch: true
  });
};

async function fetchTerms(elem, cvId) {
  if (!elem.find(".loader").length) elem.append("<span class='loader'></span>");
	const url = '<%= typeahead_sample_controlled_vocabs_path %>' + `?q=${elem.text()}&scv_id=${cvId}`
  const res = await ajaxCall(url, "GET", { dataType: "json" });
	setSource(elem, res);
	elem.focus().autocomplete("search");
	elem.find(".loader").remove();
}
//** =============End Autocomplete============== */

async function batchCreateSample(sampleTypes, projectDefaultPolicy) {
  try {
    let data = [];
    sampleTypes.forEach((s) => {
      s.samples.forEach((sa, k) => {
        data.push(
          batchSampleCreateStruct(sa.exId, sa.data, s.sampleTypeId, s.pid, projectDefaultPolicy, s.assayId)
        );
      });
    });

    if (data.length == 0) {
      return;
    }
    return ajaxCall("<%= batch_create_samples_path %>", "POST", { data: JSON.stringify({ data }) });
  } catch (e) {
    console.log(e);
  }
}

async function batchDeleteSample(sampleTypes) {
  try {
    let data = [];
    sampleTypes.forEach((s) => {
      s.samples.forEach((sa, k) => {
        data.push(batchSampleDeleteStruct(sa.exId, sa.id));
      });
    });

    if (data.length == 0) {
      return;
    }
    return ajaxCall("<%= batch_delete_samples_path %>", "DELETE", { data: JSON.stringify({ data }) });
  } catch (e) {
    console.log(e);
  }
}

// This function is called when 'excel-export' btn is clicked.
// Posts the content of the dynamic table to the single_pages_controller,
// which generates an excel workbook based on a template.
async function exportToExcel(tableName, studyId, assayId, sampleTypeId) {
    const headerRow = $j(`table[id=${tableName}] thead tr`)["0"];

    // Cells from the table body => Each row = array
    // For some reason they contain null values, which should be filtered out
    let bodyCells = $j(`table[id=${tableName}]`).DataTable().data().toArray().map(subarray => subarray.filter(function(el){return el != null}));

    // Return array of table header cells from headerRow
    let headerCells = [];
    $j.each(headerRow.cells, function (i, v) {
        headerCells.push(v.textContent);
    });

    // Construct the 'struct' of the table data
    let data = [];
    for (let i = 0; i < bodyCells.length; i++) {
        const row = bodyCells[i];
        // If a row has been checked / unchecked,
        // the datatable body gets one extra hidden cell at index 1,
        // compared to the table header. This has to be removed.
        if (row.length !== headerCells.length)row.splice(1,1);
        let obj = {};
        for (let j = 0; j < headerCells.length; j++) {
          const attr = headerCells[j];
          const val = row[j];

          // The source inputs are wrapped in an object and must be unwrapped first
          // And then packaged as a single element
          if(j === 0) {
              obj["selected"] = (val === "") ? false : val;
          } else {
              obj[attr] = val;
          }
          if(obj.selected) data.push(obj);
        }
      }

      // Use ajax for POST request with table data in the body
      // If succes => Redirect to download path for retrieving excel file
      $j.ajax({
        type: 'POST',
        url: '<%= export_to_excel_single_pages_path() %>',
        data: { sample_data: JSON.stringify(data),
          sample_type_id: JSON.stringify(sampleTypeId),
          study_id: JSON.stringify(studyId),
          assay_id: JSON.stringify(assayId),
        },
        success: function(response) {
          downloadUrl = `<%= download_samples_excel_single_pages_path() %>?uuid=${response.uuid}`;
          window.location.href = downloadUrl;
        },
        error: function(response) {
            alert(`Failed to export through excel!\nStatus: ${response.status}\nError: ${JSON.stringify(response.error().statusText)}`);
        }
    });

}

async function batchUpdateSample(sampleTypes) {
  try {
    let data = [];
    sampleTypes.forEach((s) => {
      s.samples.forEach((sa, k) => {
        data.push(batchSampleUpdateStruct(sa.exId, sa.data, sa.id));
      });
    });

    if (data.length == 0) {
      return;
    }
    return ajaxCall("<%= batch_update_samples_path %>", "PUT", { data: JSON.stringify({ data }) });
  } catch (e) {
    console.log(e);
  }
}

function isMobile() {
	/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}
